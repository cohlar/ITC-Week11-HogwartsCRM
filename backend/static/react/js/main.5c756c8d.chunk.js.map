{"version":3,"sources":["pages/Dashboard.js","pages/Students.js","pages/ViewStudent.js","lib/api.js","pages/AddStudent.js","components/Header.js","components/NavItem.js","components/SideNav.js","components/Inexisting.js","App.js","serviceWorker.js","index.js"],"names":["Dashboard","Students","ViewStudent","createStudent","firstname","lastname","axios","get","baseUrl","AddStudent","useState","setFirstname","setLastname","userMessage","setUserMessage","for","id","name","type","onChange","e","target","value","onClick","a","async","preventDefault","setTimeout","console","log","toString","status","className","message","Header","src","alt","NavItem","props","imgName","path","exact","to","navList","SideNav","map","navElement","key","Inexisting","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"js/main.5c756c8d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Dashboard() {\r\n    return (\r\n        <main>\r\n            I'm a dashboard\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default Dashboard;\r\n","import React from 'react';\r\n\r\nfunction Students() {\r\n    return (\r\n        <main>\r\n            I'm a list of students\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default Students;\r\n","import React from 'react';\r\n\r\nfunction ViewStudent() {\r\n    return (\r\n        <main>\r\n            I'm a student view\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default ViewStudent;\r\n","import axios from 'axios';\r\n\r\nconst baseUrl = 'http://127.0.0.1:5000/';\r\n\r\nexport function createStudent(firstname, lastname) {\r\n    const apiPath = 'students/add/';\r\n    return axios.get(baseUrl + apiPath + firstname + '/' + lastname);\r\n}","import React, { useState } from 'react';\r\nimport { createStudent } from '../lib/api.js'\r\n\r\nfunction AddStudent() {\r\n    const [firstname, setFirstname] = useState('');\r\n    const [lastname, setLastname] = useState('');\r\n    const [userMessage, setUserMessage] = useState({ 'status': null, 'message': null })\r\n\r\n    function setSuccessMessage() {\r\n        setUserMessage({\r\n            'status': 'success',\r\n            'message': 'Student has been successfully added to the database.'\r\n        });\r\n\r\n        setTimeout(() => {\r\n            setUserMessage({ 'status': null, 'message': null })\r\n        }, 100000);\r\n    }\r\n\r\n    function setErrorMessage() {\r\n        setUserMessage({\r\n            'status': 'error',\r\n            'message': 'There has been an error, please try again later (please see console for additional information).'\r\n        });\r\n\r\n        setTimeout(() => {\r\n            setUserMessage({ 'status': null, 'message': null })\r\n        }, 5000);\r\n    }\r\n\r\n    async function onSumbitHandler(e) {\r\n        e.preventDefault();\r\n        try {\r\n            await createStudent(firstname, lastname);\r\n            setSuccessMessage();\r\n            setFirstname('');\r\n            setLastname('');\r\n        }\r\n        catch(error) {\r\n            setErrorMessage();\r\n            console.log(error.toString());\r\n        }\r\n    }\r\n\r\n    return (\r\n        <main>\r\n            <form>\r\n                <label for=\"firstname\">First name:</label>\r\n                <input id=\"firstname\" name=\"firstname\" type=\"text\"\r\n                    onChange={(e) => setFirstname(e.target.value)}\r\n                />\r\n\r\n                <label for=\"lastname\">Last name:</label>\r\n                <input id=\"lastname\" name=\"lastname\" type=\"text\"\r\n                    onChange={(e) => setLastname(e.target.value)}\r\n                />\r\n\r\n                <button onClick={onSumbitHandler} type='submit'>\r\n                    Create\r\n                </button>\r\n            </form>\r\n\r\n            {userMessage.status &&\r\n                <div className={userMessage.status}>\r\n                    {userMessage.message}\r\n                </div>\r\n            }\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default AddStudent;\r\n","import React from 'react';\r\n\r\nfunction Header() {\r\n    return (\r\n        <header>\r\n            <img src='/static/img/logo_white.png' alt='Hogwarts CRM Logo' />\r\n            <span>Something</span>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nfunction NavItem(props) {\r\n    const { name, imgName, path } = props;\r\n    return (\r\n        <NavLink exact to={path} className='nav-element'>\r\n            <img className='nav-icon' src={'/static/img/icons/' + imgName} alt='dashboard icon' />\r\n            {name}\r\n        </NavLink>\r\n    );\r\n}\r\n\r\nexport default NavItem;\r\n","import React from 'react';\r\nimport NavItem from './NavItem.js'\r\n\r\nconst navList = [\r\n    { 'name': 'Dashboard',      'imgName': 'dashboard.png',     'path': '/'             },\r\n    { 'name': 'Students',       'imgName': 'student-list.png',  'path': '/students'     },\r\n    { 'name': 'View Student',   'imgName': 'view-student.png',  'path': '/view-student' },\r\n    { 'name': 'Add Student',    'imgName': 'add-student.png',   'path': '/add-student'  }\r\n]\r\n\r\nfunction SideNav() {\r\n    return (\r\n        <nav>\r\n            {navList.map((navElement) => {\r\n                return (\r\n                    <NavItem\r\n                        name={navElement.name}\r\n                        imgName={navElement.imgName}\r\n                        path={navElement.path}\r\n                        key={navElement.imgName}\r\n                    />\r\n                );\r\n            })}\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default SideNav;\r\n","import React from 'react';\r\n\r\nfunction Inexisting() {\r\n    return (\r\n        <main>\r\n            Sorry, this page does not exist... you shouldn't mess with the URLs! :)\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default Inexisting;\r\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\nimport './App.css';\nimport Dashboard from './pages/Dashboard.js'\nimport Students from './pages/Students.js'\nimport ViewStudent from './pages/ViewStudent'\nimport AddStudent from './pages/AddStudent.js'\nimport Header from './components/Header.js'\nimport SideNav from './components/SideNav.js'\nimport Inexisting from './components/Inexisting.js'\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Router>\n\n        <Header />\n\n        <section id='content'>\n          <SideNav />\n\n          <Switch>\n            <Route exact path='/'>\n              <Dashboard />\n            </Route>\n            <Route path='/students'>\n              <Students />\n            </Route>\n            <Route path='/view-student'>\n              <ViewStudent />\n            </Route>\n            <Route path='/add-student'>\n              <AddStudent />\n            </Route>\n            <Route path='/*'>\n              <Inexisting />\n            </Route>\n          </Switch>\n\n        </section>\n\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}